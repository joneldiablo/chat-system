{"version":3,"sources":["../../../src/api/controllers/onboarding-controller.js"],"names":["OnboardingController","UserModel","email","password","code","usr","getByColumn","query","active","passOk","bcrypt","compare","token","jwt","sign","id","masterKey","pass","saltIn","salt","hash","hashSync","pw","compareSync","Controller"],"mappings":"20CAMqBA,qB,aAEnB;;KAGA,YAAc,kHACNC,iBADM,EAEb,CAED;;iFAGiC,IAAnBC,EAAmB,GAAnBA,KAAmB,CAAZC,CAAY,GAAZA,QAAY,CAC/B,GAAI,CAACD,CAAD,EAAU,CAACC,CAAf,CACE,KAAM,CAAEC,KAAM,GAAR,CAAN,CAEF,GAAIC,GAAM,KAAM,MAAKC,WAAL,CAAiB,CAAEC,MAAO,CAAEL,OAAF,CAAT,CAAjB,CAAuC,EAAvC,CAA2C,EAA3C,CAA+C,IAA/C,IAAhB,CACA,GAAI,CAACG,CAAL,CACE,KAAM,CAAED,KAAM,GAAR,CAAN,CAEF,GAAI,CAACC,EAAIG,MAAT,CACE,KAAM,CAAEJ,KAAM,GAAR,CAAN,CAEF,GAAIK,GAAS,KAAMC,kBAAOC,OAAP,CAAeR,CAAf,CAAyBE,EAAIF,QAA7B,CAAnB,CACA,GAAI,CAACM,CAAL,CACE,KAAM,CAAEL,KAAM,GAAR,CAAN,CAEF,GAAIQ,GAAQC,uBAAIC,IAAJ,CAAS,CAAEC,GAAIV,EAAIU,EAAV,CAAT,CAAyBC,iBAAzB,CAAZ,CAEA,MAAO,CAAED,GAAIV,EAAIU,EAAV,CAAcH,OAAd,CACR,C,oCAESK,C,CAAqB,IAAfC,EAAe,wDAANC,YAAM,CACvBC,EAAOV,iBAAOW,QAAP,CAAgBJ,CAAhB,CAAsBC,CAAtB,CADgB,CAE7B,MAAOE,EACR,C,sCAEWE,C,CAAIF,C,CAAM,CACpB,MAAOV,kBAAOa,WAAP,CAAmBD,CAAnB,CAAuBF,CAAvB,CACR,C,OAvC+CI,4B,kBAA7BxB,oB","file":"onboarding-controller.js","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport Controller from \"abstract-controller\";\nimport { UserModel } from \"../models\";\nimport { masterKey, salt } from \"../../config\";\nimport bcrypt from \"bcrypt\";\n\nexport default class OnboardingController extends Controller {\n\n  /**\n   * \n   */\n  constructor() {\n    super(UserModel);\n  }\n\n  /**\n   * \n   */\n  async login({ email, password }) {\n    if (!email || !password) {\n      throw { code: 403 };\n    }\n    let usr = await this.getByColumn({ query: { email } }, {}, {}, null, true);\n    if (!usr) {\n      throw { code: 403 };\n    }\n    if (!usr.active) {\n      throw { code: 401 };\n    }\n    let passOk = await bcrypt.compare(password, usr.password);\n    if (!passOk) {\n      throw { code: 403 };\n    }\n    let token = jwt.sign({ id: usr.id }, masterKey);\n\n    return { id: usr.id, token };\n  }\n\n  cryptPass(pass, saltIn = salt) {\n    const hash = bcrypt.hashSync(pass, saltIn);\n    return hash;\n  }\n\n  decryptPass(pw, hash) {\n    return bcrypt.compareSync(pw, hash);\n  }\n}"]}