{"version":3,"sources":["../src/ApiAccess.js"],"names":["ApiAccess","_app","app","get","serviceVersion","bind","use","authMiddleware","routesMapper","routes","private","public","usersConnected","req","res","version","json","next","token","headers","usr","auth","e","errors","code","status","user","jwt","verify","masterKey","error","rm","forEach","path","route","method","controller","task","toLowerCase","ctrlr","controllers","input","normalize","data","output","done","description","console","body","params","query","server","io","on","socket","handshake","emit","usrExist","filter","u","id","length","sockets","push","messageC","MessageController","m","row","set","receiver","receiverId","s","sender","senderId"],"mappings":"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","file":"ApiAccess.js","sourcesContent":["import express from \"express\";\nimport socketIo from \"socket.io\";\nimport jwt from \"jsonwebtoken\";\nimport { version } from '../package.json';\nimport { masterKey } from \"./config\";\nimport controllers from \"./api/controllers\";\nimport routes from \"./api/routes\";\n\nexport default class ApiAccess {\n\n  /**\n   * \n   */\n  constructor() {\n    this._app = express();\n    let app = this._app;\n    app.get('/', this.serviceVersion.bind(this));\n    app.use('/private', this.authMiddleware.bind(this), this.routesMapper(routes.private));\n    app.use(this.routesMapper(routes.public));\n    this.usersConnected = [];\n  }\n\n  /**\n   * \n   * @param {*} req \n   * @param {*} res \n   * @param {*} next \n   */\n  serviceVersion(req, res, next) {\n    let { version } = this;\n    res.json({ version });\n  }\n\n  /**\n   * \n   * @param {*} req \n   * @param {*} res \n   * @param {*} next \n   */\n  authMiddleware(req, res, next) {\n    let { token } = req.headers;\n    let usr = this.auth(token);\n    if (!usr) {\n      let e = this.errors({ code: 401 });\n      res.status(e.status).json(e);\n      return false;\n    }\n    req.auth = usr;\n    next();\n  }\n\n  /**\n   * \n   * @param {*} routes \n   */\n  auth(token) {\n    try {\n      var user = jwt.verify(token, masterKey);\n    } catch (error) {\n      return false;\n    }\n    return user;\n  }\n\n  /**\n   * \n   * @param {*} routes \n   */\n  routesMapper(routes) {\n    let app = express();\n    let rm = this;\n    routes.forEach(route => {\n      const {\n        path,\n        method,\n        controller,\n        task\n      } = route;\n      app[method.toLowerCase()](path, async (req, res, next) => {\n        let ctrlr = new controllers[controller]();\n        let input = rm.normalize(req);\n        try {\n          var data = await ctrlr[task](input);\n        } catch (error) {\n          let e = rm.errors(error);\n          return res.status(e.status).json(e);\n        }\n        let output = rm.done(data);\n        return res.json(output);\n      });\n    });\n    return app;\n  }\n\n  /**\n   * \n   * @param {*} error \n   */\n  errors(error) {\n    let { code = 0 } = error;\n    delete error.code;\n    let e = {\n      error: true,\n      status: 500,\n      code,\n      description: error\n    }\n    switch (code) {\n      case 403:\n        e.status = 403;\n        e.description = 'forbiden';\n      case 401:\n        e.status = 401;\n        e.description = 'unauthorized';\n      default:\n        break;\n    }\n    console.error(error);\n    return e;\n  }\n\n\n  /**\n   * \n   * @param {*} data \n   */\n  done(data) {\n    // Use this method to normalize done response\n    return data\n  }\n\n  /**\n   * \n   * @param {*} req \n   */\n  normalize(req) {\n    // TODO: flatten query\n    return {\n      auth: req.auth,\n      ...(req.body || {}),\n      ...(req.params || {}),\n      ...(req.query || {})\n    };\n  }\n\n  /**\n   * \n   */\n  get app() {\n    return this._app;\n  }\n\n  /**\n   * \n   * @param {*} server \n   */\n  chatInit(server) {\n    let io = socketIo(server);\n    io.on('connection', (socket) => {\n      //console.log(socket.id);\n      let { token } = socket.handshake.query;\n      let user = this.auth(token);\n      if (!user) {\n        socket.emit('rejected');\n        return false;\n      }\n      let usrExist = this.usersConnected.filter(u => u.id == user.id);\n      if (usrExist.length) {\n        usrExist[0].sockets.push(socket);\n      } else {\n        user.sockets = [socket];\n        this.usersConnected.push(user);\n      }\n      socket.emit('auth', { done: true });\n      let messageC = new controllers.MessageController();\n      socket.on('newMessage', async (m) => {\n        let row = await messageC.set(m);\n        let receiver = this.usersConnected.filter(u => u.id == m.receiverId);\n        if (receiver.length) {\n          receiver[0].sockets.forEach(s => {\n            s.emit('newMessageReceived', row);\n          });\n        }\n        let sender = this.usersConnected.filter(u => u.id == m.senderId);\n        sender[0].sockets.forEach(s => {\n          if (s.id != socket.id)\n            s.emit('newMessageReceived', row);\n        });\n      });\n    });\n  }\n\n  /**\n   * \n   */\n  get version() {\n    return version;\n  }\n\n}\n"]}