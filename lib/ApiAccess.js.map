{"version":3,"sources":["../src/ApiAccess.js"],"names":["ApiAccess","_app","app","get","serviceVersion","bind","use","auth","routesMapper","routes","private","public","req","res","version","json","next","token","headers","user","jwt","verify","masterKey","error","e","errors","code","status","rm","forEach","path","route","method","controller","task","toLowerCase","ctrlr","controllers","input","normalize","data","output","done","description","console","body","params","query","server","io","on","socket","payload","log"],"mappings":"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","file":"ApiAccess.js","sourcesContent":["import express from \"express\";\nimport socketIo from \"socket.io\";\nimport jwt from \"jsonwebtoken\";\nimport { version } from '../package.json';\nimport { masterKey } from \"./config\";\nimport controllers from \"./api/controllers\";\nimport routes from \"./api/routes\";\n\nexport default class ApiAccess {\n\n  /**\n   * \n   */\n  constructor() {\n    this._app = express();\n    let app = this._app;\n    app.get('/', this.serviceVersion.bind(this));\n    app.use('/private', this.auth.bind(this), this.routesMapper(routes.private));\n    app.use(this.routesMapper(routes.public));\n  }\n\n  /**\n   * \n   * @param {*} req \n   * @param {*} res \n   * @param {*} next \n   */\n  serviceVersion(req, res, next) {\n    let { version } = this;\n    res.json({ version });\n  }\n\n  /**\n   * \n   * @param {*} req \n   * @param {*} res \n   * @param {*} next \n   */\n  auth(req, res, next) {\n    let { token } = req.headers;\n    try {\n      var user = jwt.verify(token, masterKey);\n    } catch (error) {\n      let e = this.errors({ code: 401 });\n      res.status(e.status).json(e);\n      return false;\n    }\n    req.auth = user;\n    next();\n  }\n\n  /**\n   * \n   * @param {*} routes \n   */\n  routesMapper(routes) {\n    let app = express();\n    let rm = this;\n    routes.forEach(route => {\n      const {\n        path,\n        method,\n        controller,\n        task\n      } = route;\n      app[method.toLowerCase()](path, async (req, res, next) => {\n        let ctrlr = new controllers[controller]();\n        let input = rm.normalize(req);\n        try {\n          var data = await ctrlr[task](input);\n        } catch (error) {\n          let e = rm.errors(error);\n          return res.status(e.status).json(e);\n        }\n        let output = rm.done(data);\n        return res.json(output);\n      });\n    });\n    return app;\n  }\n\n  /**\n   * \n   * @param {*} error \n   */\n  errors(error) {\n    let { code = 0 } = error;\n    delete error.code;\n    let e = {\n      error: true,\n      status: 500,\n      code,\n      description: error\n    }\n    switch (code) {\n      case 403:\n        e.status = 403;\n        e.description = 'forbiden';\n      case 401:\n        e.status = 401;\n        e.description = 'unauthorized';\n      default:\n        break;\n    }\n    console.error(error);\n    return e;\n  }\n\n\n  /**\n   * \n   * @param {*} data \n   */\n  done(data) {\n    // Use this method to normalize done response\n    return data\n  }\n\n  /**\n   * \n   * @param {*} req \n   */\n  normalize(req) {\n    // TODO: flatten query\n    return {\n      auth: req.auth,\n      ...(req.body || {}),\n      ...(req.params || {}),\n      ...(req.query || {})\n    };\n  }\n\n  /**\n   * \n   */\n  get app() {\n    return this._app;\n  }\n\n  /**\n   * \n   * @param {*} server \n   */\n  chatInit(server) {\n    let io = socketIo(server);\n    io.on('connection', (socket) => {\n      socket.on('auth', (payload) => {\n        console.log(payload);\n      });\n    });\n  }\n\n  /**\n   * \n   */\n  get version() {\n    return version;\n  }\n\n}\n"]}